#include <Arduino.h>
#include "affichage.h"
#include "DEL.h"
#include "Proximite.h"
#include "Chargeur.h"

#define DUMP_REGS
#define PWM_LED_PIN       10

#include <Wire.h>
#include <APDS9930.h>

// Global Variables
APDS9930 apds = APDS9930(); // Create an instance of the APDS9930 class
uint16_t proximity_data = 0;// variable qui prendra la valeur du capteur de proximité
int proximity_max = 0; 
float Light_data = 0;// variable qui prendra la valeur de capteur de lumiere
static int flagpers = 0; variable qui va determiner le nombre de personne passé
bool DoneOnce = true;
bool flagchar = false; 
int isCharging = 0;
bool flag100ms = false;
int Total100ms = 0;

#define MasterPiece_width 128 // Largeur de l'image
#define MasterPiece_height 64 // Hauteur de l'image
static unsigned char MasterPiece_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x07, 
  0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xEF, 0xFB, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFB, 0xFE, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF9, 
  0xFE, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0C, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0xFE, 0x3F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x3E, 
  0x00, 0xCE, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3E, 0x00, 0x0F, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x3F, 0x00, 0x07, 0xFC, 0x03, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x1C, 
  0x80, 0x07, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x1F, 0x80, 0x03, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x80, 0x0F, 0xC0, 0x03, 0xF8, 0x01, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7B, 0xC0, 0x0F, 
  0xC0, 0x03, 0xF8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x78, 0x1C, 0x00, 0xE0, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xEF, 0xFF, 0xE3, 0x01, 0xFC, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xEF, 0xFB, 
  0xFF, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xC0, 0xE7, 0xFB, 0xFF, 0x03, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0xFE, 0x1F, 0x7E, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 
  0xF8, 0x3F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 
  0x00, 0x00, 0xF8, 0x00, 0x38, 0xFC, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x3C, 0xF0, 0x1F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0xFC, 0x00, 
  0x1C, 0xE0, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 
  0x00, 0x00, 0x00, 0x00, 0x1E, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x0E, 0xC0, 0x0F, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x3E, 0x00, 
  0x0E, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x20, 0x00, 0x30, 0x00, 
  0xEF, 0x01, 0x3F, 0x00, 0x0F, 0xE0, 0x07, 0x00, 0x06, 0x01, 0x08, 0x00, 
  0x20, 0x00, 0x80, 0x00, 0xE0, 0x41, 0x0F, 0x00, 0x07, 0xE0, 0x03, 0x00, 
  0x06, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0xF0, 0xBC, 0xDF, 0xFF, 
  0x07, 0xF0, 0x03, 0x00, 0x8A, 0x48, 0x98, 0x00, 0x29, 0x21, 0x81, 0x00, 
  0x00, 0xBE, 0xEF, 0xFF, 0x07, 0xF0, 0x03, 0x00, 0x4A, 0x08, 0x88, 0xA0, 
  0x28, 0x01, 0x82, 0x00, 0x00, 0x9E, 0xEF, 0xFF, 0x3F, 0xF8, 0x01, 0x00, 
  0x52, 0x08, 0x88, 0xA4, 0x20, 0x16, 0x82, 0x00, 0x00, 0xC0, 0xF7, 0xFF, 
  0xFF, 0xF8, 0x01, 0x00, 0x02, 0x48, 0x88, 0xA2, 0x20, 0x20, 0x82, 0x00, 
  0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFD, 0x00, 0x00, 0x22, 0x88, 0x8B, 0x2C, 
  0x27, 0xC7, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xF0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x7C, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0xFC, 0x07, 0xC0, 0x0F, 
  0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 
  0xFC, 0xFF, 0xC1, 0x0F, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3E, 0x00, 0x00, 0xFC, 0xFF, 0xC3, 0x0F, 0x00, 0x00, 0x7C, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0xFC, 0xFF, 0x87, 0x07, 
  0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x7C, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7C, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x7C, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x07, 0x00, 
  0x00, 0x0F, 0x7C, 0xF8, 0x00, 0xF0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x7E, 
  0x7C, 0xE0, 0xC7, 0xCF, 0xEF, 0x3F, 0x7C, 0xFE, 0x03, 0xFE, 0x1F, 0x3F, 
  0xF0, 0x83, 0xCF, 0xFF, 0x7C, 0xF0, 0xC3, 0xCF, 0xFF, 0x7F, 0x7C, 0xFF, 
  0x07, 0xFF, 0x3F, 0x3E, 0xF0, 0x83, 0xEF, 0xFF, 0xFC, 0xFF, 0xC1, 0xCF, 
  0xFF, 0x7F, 0xFC, 0xFF, 0x8F, 0xFF, 0x7F, 0x3E, 0xF8, 0x83, 0xF7, 0xE7, 
  0xFC, 0x7F, 0xC0, 0xCF, 0x1F, 0x7E, 0xFC, 0xC1, 0xCF, 0x1F, 0xFE, 0x7E, 
  0xF8, 0xC3, 0xF7, 0x01, 0xFC, 0xFF, 0xC3, 0xCF, 0x0F, 0xFC, 0xFC, 0x80, 
  0xCF, 0x07, 0xF8, 0x7C, 0xF8, 0xC7, 0xF7, 0x03, 0xFC, 0xFF, 0xC7, 0xCF, 
  0x0F, 0xFC, 0xFC, 0x80, 0xFF, 0x07, 0xF8, 0x7C, 0xFC, 0xC7, 0xF3, 0x0F, 
  0x7C, 0xC0, 0xCF, 0xCF, 0x0F, 0xFC, 0x7C, 0x80, 0xFF, 0x07, 0xF8, 0xFD, 
  0xBC, 0xC7, 0xE3, 0x7F, 0x7C, 0xC0, 0xCF, 0xCF, 0x0F, 0xFC, 0x7C, 0x80, 
  0xFF, 0x07, 0xF8, 0xF9, 0x9C, 0xEF, 0xC3, 0xFF, 0x7C, 0xC0, 0xDF, 0xCF, 
  0x0F, 0xFC, 0x7C, 0x80, 0xFF, 0x07, 0xF8, 0xF9, 0x9E, 0xEF, 0x01, 0xFF, 
  0x7C, 0xC0, 0xCF, 0xCF, 0x0F, 0xFC, 0xFC, 0x80, 0xEF, 0x07, 0xF8, 0xF8, 
  0x1E, 0xEF, 0x01, 0xF8, 0x7C, 0xE0, 0xCF, 0xCF, 0x0F, 0xFC, 0xFC, 0xC0, 
  0xCF, 0x0F, 0xFC, 0xF0, 0x0F, 0xEF, 0x01, 0xF0, 0xFC, 0xFF, 0xCF, 0xCF, 
  0x0F, 0xFC, 0xFC, 0xF3, 0xCF, 0x3F, 0x7F, 0xF0, 0x0F, 0xFF, 0x30, 0xF0, 
  0xFC, 0xFF, 0xC7, 0xCF, 0x0F, 0xFC, 0xFC, 0xFF, 0x87, 0xFF, 0x7F, 0xF0, 
  0x0F, 0xFE, 0xF0, 0xFF, 0xFC, 0xFF, 0xC1, 0xCF, 0x0F, 0xFC, 0x7C, 0xFF, 
  0x03, 0xFF, 0x1F, 0xE0, 0x07, 0xFE, 0xF0, 0xFF, 0xFC, 0x7F, 0xC0, 0xCF, 
  0x0F, 0xFC, 0x7C, 0xFE, 0x00, 0xFC, 0x07, 0xE0, 0x07, 0x7E, 0xF0, 0x3F, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, }; // 128x64 px

void TimerInterrupt(void);
  // the setup function runs once when you press reset or power the board
void setup() {
  // Initialiser les LEDs et les capteurs
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(9600); // Pour déboguer et afficher des informations
  
  //Proximite
  StartProx(apds, proximity_data, proximity_max);
  
  //DEL
  run();
  
  //OLED
  StartScreen();

  AfficherInfo(flagpers, flagchar);// Afficher l'écran de démarrage
  
  timer1_attachInterrupt(TimerInterrupt); // Attacher l'interruption
  timer1_enable(TIM_DIV1, TIM_EDGE, TIM_SINGLE); // Activer le timer
  timer1_write(8000000); //100ms delay 
}

void loop() {   
  if (flag100ms){
    Total100ms++;
    isCharging = Charge();
    if (isCharging < 512) {
      rouge(); // Charge active
      flagchar = true;
    } else {
      jaune(); // Pas en charge
      flagchar = false;
    }
  }
  if (Total100ms < 150){
      // Read the proximity value
    if ( !apds.readProximity(proximity_data) ) {
      Serial.println("Error reading proximity value");
    } else {
      Serial.print("Proximity: ");
      Serial.print(proximity_data);
      
      apds.readProximity(proximity_data);
      Serial.print(F("  Remapped: "));
      Serial.println(proximity_data);
      //analogWrite(PWM_LED_PIN, proximity_data);
      delay(10);
      // condition qui permet de verifier qu'on lit bien le capteur de proximité
      if(!apds.readAmbientLightLux(Light_data)){
        Serial.println("Error reading light value");
      }
      else{
          Serial.print(" light value"); 
          Serial.println(Light_data);
          // condition qui verifier qu'une autre personne est passe seuil de 550
        if (proximity_data > 550){
    //   condition qui permet d'attendre qu'une autre personne passe avant d'incrementer la valeur
          if (DoneOnce){
              flagpers++;
              DoneOnce = false;
          }
        }
        else if (proximity_data < 550)
        {
          DoneOnce = true;
          AfficherInfo(flagpers, flagchar);
        }
          
      else{}
        Serial.print(flagpers);
      }
    }
    setBrightness(Light_data);
    
  }

  else if (Total100ms < 180){
    // Afficher l'image
    AfficherImage(0, 0, MasterPiece_width, MasterPiece_height, MasterPiece_bits);   
  }

  else{
    Total100ms = 0;
  }
  
}

void TimerInterrupt(void){ 
  timer1_write(8000000); 
  flag100ms = true;
}
